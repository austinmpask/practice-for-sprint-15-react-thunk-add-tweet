{"ast":null,"code":"// constant to avoid debugging typos\nconst GET_ALL_TWEETS = \"tweet/getAllTweets\";\nconst POST_TWEET = \"tweet/postTweet\"; //regular action creator\n\nconst loadTweets = tweets => {\n  return {\n    type: GET_ALL_TWEETS,\n    tweets\n  };\n}; // thunk action creator\n\n\nexport const getAllTweets = () => async dispatch => {\n  const response = await fetch(\"/api/tweets\");\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(loadTweets(data));\n    return data;\n  }\n}; //regular action creator\n\nconst insertTweet = tweet => {\n  return {\n    type: POST_TWEET,\n    tweet\n  };\n}; //thunk action creator\n\n\nexport function postTweet() {\n  return async dispatch => {\n    const response = await fetch(\"/api/tweets\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        message: \"urmom\"\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Shit broke!\");\n    }\n\n    const data = await response.json();\n\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(data);\n    }\n\n    dispatch(insertTweet(data));\n  };\n} // state object\n\nconst initialState = {}; // reducer\n\nconst tweetsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_ALL_TWEETS:\n      {\n        const newState = {};\n        action.tweets.forEach(tweet => newState[tweet.id] = tweet);\n        return newState;\n      }\n\n    case POST_TWEET:\n      {\n        const {\n          id,\n          message,\n          createdAt,\n          updatedAt\n        } = action.tweet;\n        return { ...state,\n          [action.tweet.id]: {\n            id,\n            message,\n            createdAt,\n            updatedAt\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default tweetsReducer;","map":{"version":3,"sources":["/home/austin/Documents/code/aa/wk15/practice-for-sprint-15-react-thunk-add-tweet/frontend/src/store/tweet.js"],"names":["GET_ALL_TWEETS","POST_TWEET","loadTweets","tweets","type","getAllTweets","dispatch","response","fetch","ok","data","json","insertTweet","tweet","postTweet","method","headers","body","JSON","stringify","message","Error","process","env","NODE_ENV","console","log","initialState","tweetsReducer","state","action","newState","forEach","id","createdAt","updatedAt"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAG,oBAAvB;AACA,MAAMC,UAAU,GAAG,iBAAnB,C,CAEA;;AACA,MAAMC,UAAU,GAAIC,MAAD,IAAY;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,cADD;AAELG,IAAAA;AAFK,GAAP;AAID,CALD,C,CAOA;;;AACA,OAAO,MAAME,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,CAA5B;;AAEA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AAEAL,IAAAA,QAAQ,CAACJ,UAAU,CAACQ,IAAD,CAAX,CAAR;AACA,WAAOA,IAAP;AACD;AACF,CATM,C,CAWP;;AACA,MAAME,WAAW,GAAIC,KAAD,IAAW;AAC7B,SAAO;AACLT,IAAAA,IAAI,EAAEH,UADD;AAELY,IAAAA;AAFK,GAAP;AAID,CALD,C,CAOA;;;AACA,OAAO,SAASC,SAAT,GAAqB;AAC1B,SAAO,MAAOR,QAAP,IAAoB;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,EAAgB;AAC1CO,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFiC;AAK1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,OAAO,EAAE;AADU,OAAf;AALoC,KAAhB,CAA5B;;AAUA,QAAI,CAACb,QAAQ,CAACE,EAAd,EAAkB;AAChB,YAAM,IAAIY,KAAJ,CAAU,aAAV,CAAN;AACD;;AACD,UAAMX,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;;AACA,QAAIW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACD;;AACDJ,IAAAA,QAAQ,CAACM,WAAW,CAACF,IAAD,CAAZ,CAAR;AACD,GAnBD;AAoBD,C,CAED;;AACA,MAAMiB,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AACtD,UAAQA,MAAM,CAAC1B,IAAf;AACE,SAAKJ,cAAL;AAAqB;AACnB,cAAM+B,QAAQ,GAAG,EAAjB;AACAD,QAAAA,MAAM,CAAC3B,MAAP,CAAc6B,OAAd,CAAuBnB,KAAD,IAAYkB,QAAQ,CAAClB,KAAK,CAACoB,EAAP,CAAR,GAAqBpB,KAAvD;AACA,eAAOkB,QAAP;AACD;;AACD,SAAK9B,UAAL;AAAiB;AACf,cAAM;AAAEgC,UAAAA,EAAF;AAAMb,UAAAA,OAAN;AAAec,UAAAA,SAAf;AAA0BC,UAAAA;AAA1B,YAAwCL,MAAM,CAACjB,KAArD;AACA,eAAO,EACL,GAAGgB,KADE;AAEL,WAACC,MAAM,CAACjB,KAAP,CAAaoB,EAAd,GAAmB;AACjBA,YAAAA,EADiB;AAEjBb,YAAAA,OAFiB;AAGjBc,YAAAA,SAHiB;AAIjBC,YAAAA;AAJiB;AAFd,SAAP;AASD;;AACD;AACE,aAAON,KAAP;AAnBJ;AAqBD,CAtBD;;AAwBA,eAAeD,aAAf","sourcesContent":["// constant to avoid debugging typos\nconst GET_ALL_TWEETS = \"tweet/getAllTweets\";\nconst POST_TWEET = \"tweet/postTweet\";\n\n//regular action creator\nconst loadTweets = (tweets) => {\n  return {\n    type: GET_ALL_TWEETS,\n    tweets,\n  };\n};\n\n// thunk action creator\nexport const getAllTweets = () => async (dispatch) => {\n  const response = await fetch(\"/api/tweets\");\n\n  if (response.ok) {\n    const data = await response.json();\n\n    dispatch(loadTweets(data));\n    return data;\n  }\n};\n\n//regular action creator\nconst insertTweet = (tweet) => {\n  return {\n    type: POST_TWEET,\n    tweet,\n  };\n};\n\n//thunk action creator\nexport function postTweet() {\n  return async (dispatch) => {\n    const response = await fetch(\"/api/tweets\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        message: \"urmom\",\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Shit broke!\");\n    }\n    const data = await response.json();\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(data);\n    }\n    dispatch(insertTweet(data));\n  };\n}\n\n// state object\nconst initialState = {};\n\n// reducer\nconst tweetsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_TWEETS: {\n      const newState = {};\n      action.tweets.forEach((tweet) => (newState[tweet.id] = tweet));\n      return newState;\n    }\n    case POST_TWEET: {\n      const { id, message, createdAt, updatedAt } = action.tweet;\n      return {\n        ...state,\n        [action.tweet.id]: {\n          id,\n          message,\n          createdAt,\n          updatedAt,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default tweetsReducer;\n"]},"metadata":{},"sourceType":"module"}