{"ast":null,"code":"var _jsxFileName = \"/home/austin/Documents/code/aa/wk15/practice-for-sprint-15-react-thunk-add-tweet/frontend/src/TweetList.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllTweets, postTweet } from \"./store/tweet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TweetList = () => {\n  _s();\n\n  const [userTweet, setUserTweet] = useState(\"\");\n  const dispatch = useDispatch();\n  const tweetList = useSelector(state => Object.values(state.tweet));\n  console.log(tweetList);\n\n  function handleButton(event) {\n    event.preventDefault();\n    console.log(userTweet);\n    dispatch(postTweet());\n    cleanup();\n  }\n\n  function cleanup() {\n    setUserTweet(\"\");\n  }\n\n  useEffect(() => {\n    dispatch(getAllTweets());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tweet List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), tweetList === null || tweetList === void 0 ? void 0 : tweetList.map(_ref => {\n      let {\n        id,\n        message\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleButton,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userTweet,\n        placeholder: \"whats happening\",\n        onChange: event => {\n          setUserTweet(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TweetList, \"175wPOC9uwmoDN+MA5b/HPPHsF8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = TweetList;\nexport default TweetList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetList\");","map":{"version":3,"sources":["/home/austin/Documents/code/aa/wk15/practice-for-sprint-15-react-thunk-add-tweet/frontend/src/TweetList.js"],"names":["useEffect","useState","useDispatch","useSelector","getAllTweets","postTweet","TweetList","userTweet","setUserTweet","dispatch","tweetList","state","Object","values","tweet","console","log","handleButton","event","preventDefault","cleanup","map","id","message","target","value"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,eAAxC;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,SAAS,GAAGP,WAAW,CAAEQ,KAAD,IAAWC,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACG,KAApB,CAAZ,CAA7B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,SAAZ;;AAEA,WAASO,YAAT,CAAsBC,KAAtB,EAA6B;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYT,SAAZ;AACAE,IAAAA,QAAQ,CAACJ,SAAS,EAAV,CAAR;AACAe,IAAAA,OAAO;AACR;;AAED,WAASA,OAAT,GAAmB;AACjBZ,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ,CAACL,YAAY,EAAb,CAAR;AACD,GAFQ,EAEN,CAACK,QAAD,CAFM,CAAT;AAIA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,SAFH,aAEGA,SAFH,uBAEGA,SAAS,CAAEW,GAAX,CAAe;AAAA,UAAC;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,OAAD;AAAA,0BACd;AAAA,kBAAaA;AAAb,SAAQD,EAAR;AAAA;AAAA;AAAA;AAAA,cADc;AAAA,KAAf,CAFH,eAKE;AAAM,MAAA,QAAQ,EAAEL,YAAhB;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAEV,SAFT;AAGE,QAAA,WAAW,EAAC,iBAHd;AAIE,QAAA,QAAQ,EAAGW,KAAD,IAAW;AACnBV,UAAAA,YAAY,CAACU,KAAK,CAACM,MAAN,CAAaC,KAAd,CAAZ;AACD;AANH;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AAmBD,CAzCD;;GAAMnB,S;UAGaJ,W,EACCC,W;;;KAJdG,S;AA2CN,eAAeA,SAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAllTweets, postTweet } from \"./store/tweet\";\n\nconst TweetList = () => {\n  const [userTweet, setUserTweet] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const tweetList = useSelector((state) => Object.values(state.tweet));\n  console.log(tweetList);\n\n  function handleButton(event) {\n    event.preventDefault();\n    console.log(userTweet);\n    dispatch(postTweet());\n    cleanup();\n  }\n\n  function cleanup() {\n    setUserTweet(\"\");\n  }\n\n  useEffect(() => {\n    dispatch(getAllTweets());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Tweet List</h1>\n      {tweetList?.map(({ id, message }) => (\n        <p key={id}>{message}</p>\n      ))}\n      <form onSubmit={handleButton}>\n        <input\n          type=\"text\"\n          value={userTweet}\n          placeholder=\"whats happening\"\n          onChange={(event) => {\n            setUserTweet(event.target.value);\n          }}\n        ></input>\n        <button type=\"submit\">Post</button>\n      </form>\n    </>\n  );\n};\n\nexport default TweetList;\n"]},"metadata":{},"sourceType":"module"}